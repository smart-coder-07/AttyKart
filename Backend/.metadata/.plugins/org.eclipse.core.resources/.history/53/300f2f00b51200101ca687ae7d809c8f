package com.cart.service;

import java.util.List;

import org.springframework.http.HttpStatusCode;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientRequestException;

import com.cart.exception.CartNotFoundException;
import com.cart.model.CartItem;
import com.cart.model.Product;
import com.cart.repository.CartRepository;

import lombok.RequiredArgsConstructor;
import reactor.core.publisher.Mono;


@Service
@RequiredArgsConstructor
public class CartServiceImpl implements CartService {
	 private final CartRepository cartRepository;
	 private final WebClient.Builder webClientBuilder;

    @Override
    public CartItem addToCart(CartItem cartItem) {
    	Product product = null;
    	try {
            // Fetch product details from ProductService
            product = webClientBuilder.build()
                    .get()
                    .uri("http://localhost:8200/" + cartItem.getProductId())
                    .retrieve()
                    .onStatus(HttpStatusCode::is4xxClientError, response ->
                            Mono.error(new CartNotFoundException("ProductService is currently unavailable")))
                    .onStatus(HttpStatusCode::is5xxServerError, response ->
                            Mono.error(new CartNotFoundException("Product not found in ProductService")))
                    .bodyToMono(Product.class)
                    .block(); // Blocking call to wait for response
            // If product is null or inactive, throw an error
            if (product == null || !"ACTIVE".equals(product.getStatus())) {
                throw new CartNotFoundException("Product is not available.");
            }

            cartItem.setProductName(product.getName());
            cartItem.setPrice(product.getPrice());
            cartItem.setImage(product.getImage());

            return cartRepository.save(cartItem);

        } catch (WebClientRequestException ex) {
            throw new CartNotFoundException("ProductService is not reachable. Please try again later.");
        } catch (Exception ex) {
            throw new CartNotFoundException(ex.getMessage());
        }
    }

    @Override
    public CartItem updateCartItem(String id, CartItem cartItem) {
        CartItem existingCartItem = cartRepository.findById(id)
                .orElseThrow(() -> new CartNotFoundException("Cart item not found with ID: " + id));
        existingCartItem.setQuantity(cartItem.getQuantity());
        return cartRepository.save(existingCartItem);
    }

    @Override
    public void removeCartItem(String id) {
        if (!cartRepository.existsById(id)) {
            throw new CartNotFoundException("Cart item not found with ID: " + id);
        }
        cartRepository.deleteById(id);
    }

    @Override
    public void clearCart(String userId) {
        cartRepository.deleteByUserId(userId);
    }

    @Override
    public List<CartItem> getCartByUserId(String userId) {
        return cartRepository.findByUserId(userId);
    }
}