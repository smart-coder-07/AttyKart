package com.wallet.service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.wallet.exception.WalletNotFoundException;
import com.wallet.model.Wallet;
import com.wallet.repository.WalletRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class WalletServiceImpl implements WalletService {
    private final WalletRepository walletRepository;

    @Override
    public Wallet addFunds(Wallet transaction) {
        // Get the wallet by userId
        Wallet wallet = walletRepository.findByUserId(transaction.getUserId())
                .stream()
                .findFirst()
                .orElseGet(() -> {
                    // If not exists, create a new one
                    Wallet newWallet = new Wallet();
                    newWallet.setUserId(transaction.getUserId());
                    newWallet.setAmount(0.0);
                    return newWallet;
                });

        // Update balance
        wallet.setAmount(wallet.getAmount() + transaction.getAmount());
        wallet.setTransactionType("CREDIT");
        return walletRepository.save(wallet);
    }

    @Override
    public Wallet deductFunds(Wallet transaction) {
        // Fetch the user's latest balance
        Optional<Wallet> latestTransaction = walletRepository.findTopByUserIdOrderByTransactionDateDesc(transaction.getUserId());

        double currentBalance = latestTransaction.map(Wallet::getAmount).orElse(0.0);

        if (currentBalance < transaction.getAmount()) {

            throw new WalletNotFoundException("Insufficient balance for user: " + transaction.getUserId());
        }

        // Deduct balance
        transaction.setAmount(currentBalance - transaction.getAmount());
        transaction.setTransactionType("DEBIT");

        return walletRepository.save(transaction);
    }

    @Override
    public List<Wallet> getTransactionsByUserId(String userId) {
        return walletRepository.findByUserId(userId);
    }
}
